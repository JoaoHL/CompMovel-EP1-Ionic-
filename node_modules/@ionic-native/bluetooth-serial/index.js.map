{"version":3,"sources":["../../../src/@ionic-native/plugins/bluetooth-serial/index.ts"],"names":[],"mappings":"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","file":"index.js","sourceRoot":"","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Cordova, Plugin, IonicNativePlugin } from '@ionic-native/core';\r\nimport { Observable } from 'rxjs/Observable';\r\n\r\n/**\r\n * @name Bluetooth Serial\r\n * @description This plugin enables serial communication over Bluetooth. It was written for communicating between Android or iOS and an Arduino.\r\n * @usage\r\n * ```typescript\r\n * import { BluetoothSerial } from '@ionic-native/bluetooth-serial';\r\n *\r\n * constructor(private bluetoothSerial: BluetoothSerial) { }\r\n *\r\n *\r\n * // Write a string\r\n * this.bluetoothSerial.write('hello world').then(success, failure);\r\n *\r\n * // Array of int or bytes\r\n * this.bluetoothSerial.write([186, 220, 222]).then(success, failure);\r\n *\r\n * // Typed Array\r\n * var data = new Uint8Array(4);\r\n * data[0] = 0x41;\r\n * data[1] = 0x42;\r\n * data[2] = 0x43;\r\n * data[3] = 0x44;\r\n * this.bluetoothSerial.write(data).then(success, failure);\r\n *\r\n * // Array Buffer\r\n * this.bluetoothSerial.write(data.buffer).then(success, failure);\r\n * ```\r\n */\r\n@Plugin({\r\n  pluginName: 'BluetoothSerial',\r\n  repo: 'https://github.com/don/BluetoothSerial',\r\n  plugin: 'cordova-plugin-bluetooth-serial',\r\n  pluginRef: 'bluetoothSerial',\r\n  platforms: ['Android', 'iOS', 'Windows Phone', 'Browser']\r\n})\r\n\r\nexport class BluetoothSerial extends IonicNativePlugin {\r\n\r\n  /**\r\n   * Connect to a Bluetooth device\r\n   * @param {string} macAddress_or_uuid Identifier of the remote device\r\n   * @returns {Observable<any>} Subscribe to connect, unsubscribe to disconnect.\r\n   */\r\n  @Cordova({\r\n    platforms: ['Android', 'iOS', 'Windows Phone'],\r\n    observable: true,\r\n    clearFunction: 'disconnect'\r\n  })\r\n  connect(macAddress_or_uuid: string): Observable<any> { return; }\r\n\r\n  /**\r\n   * Connect insecurely to a Bluetooth device\r\n   * @param {string} macAddress Identifier of the remote device\r\n   * @returns {Observable<any>} Subscribe to connect, unsubscribe to disconnect.\r\n   */\r\n  @Cordova({\r\n    platforms: ['Android'],\r\n    observable: true,\r\n    clearFunction: 'disconnect'\r\n  })\r\n  connectInsecure(macAddress: string): Observable<any> { return; }\r\n\r\n  /**\r\n   * Disconnect from the connected device\r\n   * @returns {Promise<any>}\r\n   */\r\n  @Cordova()\r\n  disconnect(): Promise<any> { return; }\r\n\r\n  /**\r\n   * Writes data to the serial port\r\n   * @param {any} data ArrayBuffer of data\r\n   * @returns {Promise<any>} returns a promise when data has been written\r\n   */\r\n  @Cordova({\r\n    platforms: ['Android', 'iOS', 'Windows Phone']\r\n  })\r\n  write(data: any): Promise<any> { return; }\r\n\r\n  /**\r\n   * Gets the number of bytes of data available\r\n   * @returns {Promise<any>} returns a promise that contains the available bytes\r\n   */\r\n  @Cordova({\r\n    platforms: ['Android', 'iOS', 'Windows Phone']\r\n  }) available(): Promise<any> { return; }\r\n\r\n  /**\r\n   * Reads data from the buffer\r\n   * @returns {Promise<any>} returns a promise with data from the buffer\r\n   */\r\n  @Cordova({\r\n    platforms: ['Android', 'iOS', 'Windows Phone']\r\n  })\r\n  read(): Promise<any> { return; }\r\n\r\n  /**\r\n   * Reads data from the buffer until it reaches a delimiter\r\n   * @param {string} delimiter string that you want to search until\r\n   * @returns {Promise<any>} returns a promise\r\n   */\r\n  @Cordova({\r\n    platforms: ['Android', 'iOS', 'Windows Phone']\r\n  })\r\n  readUntil(delimiter: string): Promise<any> { return; }\r\n\r\n  /**\r\n   * Subscribe to be notified when data is received\r\n   * @param {string} delimiter the string you want to watch for\r\n   * @returns {Observable<any>} returns an observable.\r\n   */\r\n  @Cordova({\r\n    platforms: ['Android', 'iOS', 'Windows Phone'],\r\n    observable: true,\r\n    clearFunction: 'unsubscribe'\r\n  })\r\n  subscribe(delimiter: string): Observable<any> { return; }\r\n\r\n  /**\r\n   * Subscribe to be notified when data is received\r\n   * @returns {Observable<any>} returns an observable\r\n   */\r\n  @Cordova({\r\n    platforms: ['Android', 'iOS', 'Windows Phone'],\r\n    observable: true,\r\n    clearFunction: 'unsubscribeRawData'\r\n  })\r\n  subscribeRawData(): Observable<any> { return; }\r\n\r\n  /**\r\n   * Clears data in buffer\r\n   * @returns {Promise<any>} returns a promise when completed\r\n   */\r\n  @Cordova({\r\n    platforms: ['Android', 'iOS', 'Windows Phone']\r\n  })\r\n  clear(): Promise<any> { return; }\r\n\r\n  /**\r\n   * Lists bonded devices\r\n   * @returns {Promise<any>} returns a promise\r\n   */\r\n  @Cordova({\r\n    platforms: ['Android', 'iOS', 'Windows Phone']\r\n  })\r\n  list(): Promise<any> { return; }\r\n\r\n  /**\r\n   * Reports if bluetooth is enabled\r\n   * @returns {Promise<any>} returns a promise\r\n   */\r\n  @Cordova({\r\n    platforms: ['Android', 'iOS', 'Windows Phone']\r\n  })\r\n  isEnabled(): Promise<any> { return; }\r\n\r\n  /**\r\n   * Reports the connection status\r\n   * @returns {Promise<any>} returns a promise\r\n   */\r\n  @Cordova({\r\n    platforms: ['Android', 'iOS', 'Windows Phone']\r\n  })\r\n  isConnected(): Promise<any> { return; }\r\n\r\n  /**\r\n   * Reads the RSSI from the connected peripheral\r\n   * @returns {Promise<any>} returns a promise\r\n   */\r\n  @Cordova({\r\n    platforms: ['Android', 'iOS', 'Windows Phone']\r\n  })\r\n  readRSSI(): Promise<any> { return; }\r\n\r\n  /**\r\n   * Show the Bluetooth settings on the device\r\n   * @returns {Promise<any>} returns a promise\r\n   */\r\n  @Cordova({\r\n    platforms: ['Android', 'iOS', 'Windows Phone']\r\n  })\r\n  showBluetoothSettings(): Promise<any> { return; }\r\n\r\n  /**\r\n   * Enable Bluetooth on the device\r\n   * @returns {Promise<any>} returns a promise\r\n   */\r\n  @Cordova({\r\n    platforms: ['Android', 'iOS', 'Windows Phone']\r\n  })\r\n  enable(): Promise<any> { return; }\r\n\r\n  /**\r\n   * Discover unpaired devices\r\n   * @returns {Promise<any>} returns a promise\r\n   */\r\n  @Cordova({\r\n    platforms: ['Android', 'iOS', 'Windows Phone']\r\n  })\r\n  discoverUnpaired(): Promise<any> { return; }\r\n\r\n  /**\r\n   * Subscribe to be notified on Bluetooth device discovery. Discovery process must be initiated with the `discoverUnpaired` function.\r\n   * @returns {Observable<any>} Returns an observable\r\n   */\r\n  @Cordova({\r\n    platforms: ['Android', 'iOS', 'Windows Phone'],\r\n    observable: true,\r\n    clearFunction: 'clearDeviceDiscoveredListener'\r\n  })\r\n  setDeviceDiscoveredListener(): Observable<any> { return; }\r\n\r\n  /**\r\n   * Sets the human readable device name that is broadcasted to other devices\r\n   * @param {string} newName Desired name of device\r\n   */\r\n  @Cordova({\r\n    platforms: ['Android'],\r\n    sync: true\r\n  })\r\n  setName(newName: string): void { }\r\n\r\n  /**\r\n   * Makes the device discoverable by other devices\r\n   * @param {number} discoverableDuration Desired number of seconds device should be discoverable for\r\n   */\r\n  @Cordova({\r\n    platforms: ['Android'],\r\n    sync: true\r\n  })\r\n  setDiscoverable(discoverableDuration: number): void { }\r\n\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}